---
- name: Deploy RetailMax Application
  hosts: app_servers
  become: yes
  vars:
    app_name: retailmax
    app_port: 8080
    docker_image: "{{ ecr_repository_url }}:latest"
    
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - python3-pip
          - curl
          - jq
        state: present
      when: ansible_os_family == "Debian"

    - name: Install Docker Python module
      pip:
        name: docker
        state: present

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    - name: Create application directory
      file:
        path: /opt/{{ app_name }}
        state: directory
        mode: '0755'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy docker-compose.yml
      template:
        src: docker-compose.yml.j2
        dest: /opt/{{ app_name }}/docker-compose.yml
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Copy nginx configuration
      template:
        src: nginx.conf.j2
        dest: /opt/{{ app_name }}/nginx.conf
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Create .env file
      template:
        src: .env.j2
        dest: /opt/{{ app_name }}/.env
        mode: '0644'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Login to ECR
      shell: |
        aws ecr get-login-password --region {{ aws_region }} | docker login --username AWS --password-stdin {{ ecr_repository_url }}
      args:
        chdir: /opt/{{ app_name }}

    - name: Pull latest Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: yes

    - name: Stop existing containers
      docker_compose:
        project_src: /opt/{{ app_name }}
        state: absent

    - name: Start application with Docker Compose
      docker_compose:
        project_src: /opt/{{ app_name }}
        state: present
        restarted: yes

    - name: Wait for application to be ready
      uri:
        url: "http://localhost:{{ app_port }}/health"
        status_code: 200
      register: health_check
      retries: 30
      delay: 10
      until: health_check.status == 200

    - name: Verify application is running
      uri:
        url: "http://localhost:{{ app_port }}"
        status_code: 200
      register: app_check

    - name: Display application status
      debug:
        msg: "Application is running successfully on port {{ app_port }}"
      when: app_check.status == 200 